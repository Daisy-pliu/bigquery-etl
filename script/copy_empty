#!/usr/bin/env python3

from argparse import ArgumentParser
import json
import logging
import warnings

from google.cloud import bigquery

parser = ArgumentParser()
parser.add_argument("source")
parser.add_argument("destination")
parser.add_argument("--project")
parser.add_argument("-v", "--verbose", action="store_true")
parser.add_argument("-n", "--dry-run", "--dry_run", action="store_true")

if __name__ == "__main__":
    args = parser.parse_args()
    if args.verbose:
        logging.root.setLevel(logging.INFO)
    warnings.filterwarnings("ignore", module="google.auth._default")
    client = bigquery.Client(args.project)
    source = client.get_table(args.source)
    destination = bigquery.Table(args.destination, source.schema)
    for attr in [
        # replace attribute allow list with disallow list
        "clustering_fields",
        "description",
        "encryption_configuration",
        "expires",
        "friendly_name",
        "labels",
        "partition_expiration",
        "partitioning_type",
        "range_partitioning",
        "require_partition_filter",
        "time_partitioning",
    ]:
        value = getattr(source, attr, None)
        if value is not None:
            logging.info(f"setting {attr}")
            setattr(destination, attr, value)
    api_repr = destination.to_api_repr()
    del api_repr["schema"]
    logging.info(f"creating table: {json.dumps(api_repr, indent=2)}")
    if not args.dry_run:
        client.create_table(destination)
